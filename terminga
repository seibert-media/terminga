#!/usr/bin/env python3


import curses
import re

from curses.textpad import Textbox
from datetime import datetime, timedelta
from enum import Enum, auto
from json import loads
from operator import itemgetter
from os import execv, fdopen, remove, close
from os.path import expanduser
from shlex import split
from subprocess import Popen, check_output
from sys import argv
from tempfile import mkstemp
from textwrap import wrap
from time import sleep
from traceback import print_exc

from icinga import Icinga

from requests import ConnectionError, HTTPError


VERSION = 'v16-next'
HELP = f'terminga {VERSION} | q: Quit | ?: Help'

COLORS = {
    'default': 0,
    'bar': 1,
    'state_ok': 2,
    'state_warning': 3,
    'state_critical': 4,
    'state_unknown': 5,
}
STATES = {
    0: 'ok',
    1: 'warning',
    2: 'critical',
    3: 'unknown',
    'ok': 0,
    'warning': 1,
    'critical': 2,
    'unknown': 3,
}

class DurationResult(Enum):
    NoDuration = auto()
    ParseError = auto()


def addstr(win, *args, **kwargs):
    try:
        win.addstr(*args, **kwargs)
    except curses.error:
        pass


def line(msg, width):
    return msg[:width] + ' ' * (width - len(msg))


def title(win, msg):
    height, width = win.getmaxyx()
    addstr(win, 0, 0, line(msg, width), curses.color_pair(COLORS['bar']))


def status(win, msg):
    height, width = win.getmaxyx()
    addstr(win, height - 1, 0, line(msg, width), curses.color_pair(COLORS['bar']))


def color_for_state(state):
    try:
        return curses.color_pair(COLORS['state_' + STATES[state]])
    except:
        return curses.color_pair(COLORS['default'])


def filter_items(icinga_items, only_broken, hide_ack_from_broken, filters):
    hosts = icinga_items['hosts']
    services = icinga_items['services']

    hosts_downtime = set()
    buffered = []

    for host in hosts:
        if host.downtime_depth > 0:
            hosts_downtime.add(host.host_name)
        if only_broken:
            if hide_ack_from_broken and host.acknowledgement != 0:
                continue
            if host.host_name in hosts_downtime:
                continue
            if host.state == STATES['ok'] or host.state_type == 0:
                continue

        buffered.append(host)

    for service in services:
        if only_broken:
            if hide_ack_from_broken and service.acknowledgement != 0:
                continue
            if service.downtime_depth > 0:
                continue
            if service.host_name in hosts_downtime:
                continue
            if service.state == STATES['ok'] or service.state_type == 0:
                continue

        buffered.append(service)

    mut_filters = filters[:]
    while mut_filters:
        f = mut_filters.pop(0)

        if f.startswith('!'):
            positive = False
            f = f[1:]
        else:
            positive = True

        match_re_comp = re.compile(f, re.I)

        new_buffered = []
        for item in buffered:
            search_result = match_re_comp.search(item.get_line_to_show(0))
            if (
                (positive and search_result) or
                (not positive and not search_result)
            ):
                new_buffered.append(item)
        buffered = new_buffered

    return buffered


def list_items(
    win,
    offset,
    current,
    icinga_items,
    selected,
    show_output_detail,
    size_of_item_area,
    detailed_output_offset,
):
    height, width = win.getmaxyx()
    margin_top = margin_bottom = 1

    if show_output_detail:
        try:
            output_lines = icinga_items[current].output_lines_wrapped
        except IndexError:
            output_lines = []
    else:
        output_lines = []

    output_extra = 0
    if len(output_lines) > 0:
        output_extra = 1

    if len(output_lines) > 0:
        output_lines_max_allowed = (
            height -
            margin_top -
            margin_bottom -
            output_extra -
            size_of_item_area
        )
        output_lines = output_lines[detailed_output_offset:]
        output_lines = output_lines[:output_lines_max_allowed]
        output_lines += ['~'] * (output_lines_max_allowed - len(output_lines))

    used_by_output_pane = len(output_lines) + output_extra
    usable_height_for_items = height - margin_top - margin_bottom - used_by_output_pane
    if usable_height_for_items <= 0:
        return 0

    # Scroll the upper half of the window if currently selected item
    # is not visible, because there are too many output_lines.
    # (Remember that the interval [offset, offset + usable_height_for_items),
    # an open interval on the right, is the set of valid indexes that we
    # can display at the moment. We must satisfy:
    #
    #     offset <= current < offset + usable_height_for_items
    #
    # Hence, if current >= offset + usable_… or, written slightly different,
    # current > offset + usable_… - 1, then we must scroll up. How do we
    # scroll up? By increasing offset. To which value? The largest one
    # possible. How do we find that? By solving current > offset + usable_… - 1
    # for offset.)
    # (This same logic is used in other places throughout the code.)
    if current > offset + usable_height_for_items - 1:
        offset = max(current - usable_height_for_items + 1, 0)

    max_host_len = 0
    for i in icinga_items:
        max_host_len = max(max_host_len, len(i.host_name))

    at_y = margin_top
    if len(icinga_items) == 0:
        addstr(win, at_y + 1, 0, 'No results :-)'.center(width),
               curses.color_pair(COLORS['state_ok']))
    else:
        for i, item in enumerate(icinga_items[offset:]):
            if at_y >= margin_top + usable_height_for_items:
                break

            attrs = color_for_state(item.state)
            if i + offset == current:
                attrs |= curses.A_REVERSE

            if item in selected:
                attrs |= curses.A_BOLD

            addstr(win, at_y, 0, line(item.get_line_to_show(max_host_len), width), attrs)

            at_y += 1

    if len(output_lines) > 0:
        at_y = margin_top + usable_height_for_items
        addstr(win, at_y, 0, line('', width), curses.color_pair(COLORS['bar']))
        at_y += 1
        for output in output_lines:
            addstr(win, at_y, 0, line(output, width), curses.color_pair(COLORS['default']))
            at_y += 1

    return used_by_output_pane


def duration_to_times(duration):
    if duration.lower() == 'none':
        return DurationResult.NoDuration

    try:
        if duration.endswith('s'):
            seconds = int(duration[:-1])
        elif duration.endswith('m'):
            seconds = int(duration[:-1]) * 60
        elif duration.endswith('h'):
            seconds = int(duration[:-1]) * 60 * 60
        elif duration.endswith('d'):
            seconds = int(duration[:-1]) * 60 * 60 * 24
        else:
            return DurationResult.ParseError
    except:
        return DurationResult.ParseError

    start_time = datetime.now().timestamp()
    end_time = start_time + seconds

    return start_time, end_time


def query_duration_comment(win, items, external_tool, default_duration):
    comment = None

    force_duration = True
    if default_duration.lower() == 'none':
        force_duration = False

    if force_duration:
        duration = query_string(win, f'Duration [{default_duration}]: ')
    else:
        duration = query_string(win, 'Duration: ')
    if ' ' in duration:
        duration, comment = duration.split(' ', maxsplit=1)

    if duration == '' and force_duration:
        duration = default_duration

    times = duration_to_times(duration)
    if times is DurationResult.ParseError:
        if force_duration:
            status(win, 'Invalid duration! Use something like 30s, 5m, 1h, 2d, ...')
            win.refresh()
            sleep(2)
            return None
        else:
            start_time, end_time = None, None
    elif times is DurationResult.NoDuration:
        start_time, end_time = None, None
    else:
        start_time, end_time = times

    if comment is None:
        comment = query_string(win, 'Comment: ')

    if comment == '':
        status(win, 'Empty comment, aborted!')
        win.refresh()
        sleep(2)
        return None

    if comment == '!':
        comment = external_tool_output(items, external_tool)

    return comment, start_time, end_time


def query_new_filter(win, existing):
    new = query_string(win, 'Add filter: ')
    if not new:
        return existing

    try:
        re.compile(new, re.I)
    except:
        status(win, 'Invalid regular expression!')
        win.refresh()
        sleep(2)
        return existing

    return existing + [new]


def query_string(win, prompt):
    height, width = win.getmaxyx()
    addstr(win, height - 1, 0, prompt, curses.color_pair(COLORS['bar']))
    curses.curs_set(True)
    win.refresh()

    def textbox_input_validator(key):
        if key in ['KEY_BACKSPACE', '\b', 127]:
            return curses.KEY_BACKSPACE
        return key
    editwin = curses.newwin(1, width - len(prompt), height - 1, len(prompt))
    box = Textbox(editwin)
    box.edit(textbox_input_validator)
    out = box.gather()

    curses.curs_set(False)
    del editwin
    win.touchwin()
    win.refresh()

    return out.strip()


def red_body(win):
    height, width = win.getmaxyx()
    attrs = color_for_state(STATES['critical']) | curses.A_REVERSE

    for at_y in range(1, height - 1):
        addstr(win, at_y, 0, ' ' * width, attrs)


def run_external_tool(items, external_tool):
    if not external_tool:
        return []

    args = split(external_tool)

    input_list = []
    for i in items:
        input_list.append(i.host_name)
        input_list.append(i.service_name)
        input_list.append('\r'.join(i.output_lines))

    fd, path_selection = mkstemp()
    fp = fdopen(fd, 'w')
    fp.write('\n'.join(input_list))
    fp.write('\n')
    fp.close()

    fd, path_output = mkstemp()
    close(fd)

    args_now = []
    for a in args:
        if a == '__SELECTION__':
            args_now.append(path_selection)
        elif a == '__TOOL_OUTPUT__':
            args_now.append(path_output)
        else:
            args_now.append(a)

    return [(Popen(args_now), path_selection, path_output)]


def external_tool_output(items, external_tool):
    child_pid, path_selection, path_output = run_external_tool(items, external_tool)[0]
    child_pid.wait()

    with open(path_output, 'r') as fp:
        child_output = fp.read().strip()

    try:
        remove(path_selection)
        remove(path_output)
    except FileNotFoundError:
        pass

    return child_output


def show_help_screen(win):
    msg = '''
    ?           Help
    Q           Quit immediately
    q           Quit if detailed output not shown, hide detailed output
                otherwise
    h           Hide detailed output
    l, <Enter>  Show detailed output
    J, K        Scroll detailed output one line down / up

    j, k        Scroll item list one line down / up
    g, G        Scroll item list to top / bottom
    ^F, ^G      Scroll item list half a page down / up

    r           Refresh

    b           Toggle "show only broken items"
    a           Add ACK to current / selected items
    A           Add ACK to current / selected host and all its services
    d           Put current / selected items in downtime
    D           Put current / selected host and all its services in downtime
    n           Check current / selected items NOW
    e           Launch external tool on current item

    f           Add filter regex (start with "!" for negative filter)
    F           Pop right-most filter
    v           Pop left-most filter
    H           Add host name of currently selected item to filters
    S           Add service name of currently selected item to filters
    C           Toggles usage of custom group filters

    <Space>     Select / unselect current item
    ^A          Select all currently visible items
    c           Clear selection
    '''

    height, width = win.getmaxyx()
    at_y = margin_top = margin_bottom = 1
    for m in msg.strip().splitlines():
        if at_y >= height - margin_bottom:
            break

        m = m.strip()
        addstr(win, at_y, 0, '  ' + m, curses.color_pair(COLORS['default']))
        at_y += 1


def standard_status(
    win,
    filters,
    only_broken,
    use_group_filters,
    refresh_delta,
    refresh_every,
    scroll_current,
    scroll_max,
):
    height, width = win.getmaxyx()

    flt = f'Filter: {" > ".join(filters) if filters else "<none>"}'

    indicators = '['
    indicators += 'b' if only_broken else '-'
    indicators += 'C' if use_group_filters else '-'
    indicators += ']'

    fraction = refresh_delta.total_seconds() / refresh_every.total_seconds()
    fraction = max(0, min(1, fraction))
    fill_len = 10
    fill = int(fill_len * fraction)
    fill_pad = fill_len - fill
    refresh_bar = '[' + '#' * fill + '-' * fill_pad + ']'

    if scroll_max > 0:
        scroll_fraction = scroll_current / scroll_max
    else:
        scroll_fraction = 0
    scroll_msg = '[{:3d}%][{}]'.format(
        int(round(scroll_fraction * 100)),
        scroll_max,
    )

    right_msg = refresh_bar + indicators + scroll_msg

    msg = flt
    msg += ' ' * max(0, width - len(flt) - len(right_msg))
    msg += right_msg

    return msg


def scroll_if_needed(current, force_jump_to_top, offset, height, bottompad, starty, len_to_display):
    if force_jump_to_top or len_to_display < height:
        return 0

    if current - offset >= (height - bottompad) - starty:
        offset = current - (height - bottompad) + starty + 1
    if current - offset <= -1:
        offset = current

    if offset < 0:
        offset = 0
    if offset >= len_to_display:
        offset = len_to_display - 1

    return offset


def determine_current(current, current_item, items):
    if current_item is not None and current_item in items:
        return items.index(current_item), current_item
    else:
        if len(items) > 0:
            # Try to use the item above the current one.
            index = max(current - 1, 0)
            index = min(index, len(items) - 1)
            return index, items[index]
        else:
            return 0, None


def wrap_output(item, width):
    item.output_lines_wrapped = []
    for orig_line in item.output_lines:
        wrapped_lines = wrap(
            orig_line,
            replace_whitespace=False,
            width=width,
        )
        for wrapped_line in wrapped_lines:
            item.output_lines_wrapped.append(wrapped_line)


def interact(win, icinga, config):
    curses.curs_set(False)

    curses.use_default_colors()
    curses.init_pair(COLORS['bar'], curses.COLOR_WHITE, curses.COLOR_BLUE)
    curses.init_pair(COLORS['state_ok'], curses.COLOR_GREEN, -1)
    curses.init_pair(COLORS['state_warning'], curses.COLOR_YELLOW, -1)
    curses.init_pair(COLORS['state_critical'], curses.COLOR_RED, -1)
    curses.init_pair(COLORS['state_unknown'], curses.COLOR_MAGENTA, -1)

    filters = []

    filter_dirty = True
    force_refresh = False
    icinga_items = None
    only_broken = True
    scroll_dirty = True
    selected = set()
    show_help = False
    force_jump_to_top = False
    show_output_detail = config['show_detailed_output_on_startup']

    refresh_every = timedelta(seconds=30)
    refresh_delta = timedelta(seconds=0)

    current = 0
    current_item = None
    offset = 0
    bottompad = starty = 1
    detailed_output_offset = 0

    title(win, HELP)
    status(win, '')

    children = []

    while True:
        height, width = win.getmaxyx()

        if icinga_items is None or force_refresh:
            status(win, 'Refreshing ...')
            win.refresh()

            selected = set()
            try:
                icinga_items = icinga.get_current_state()
            except (ConnectionError, HTTPError):
                icinga_items = None
            last_key = datetime.now()
            refresh_delta = timedelta(seconds=0)
            filter_dirty = True
            scroll_dirty = True
            force_refresh = False

        if filter_dirty and icinga_items is not None:
            to_display = sorted(filter_items(
                icinga_items,
                only_broken,
                config['hide_ack_from_broken'],
                filters,
            ))
            scroll_dirty = True
            filter_dirty = False

        if scroll_dirty:
            if config['jump_to_first_unhandled']:
                for i, item in enumerate(to_display):
                    if item.acknowledgement + item.downtime_depth == 0:
                        current = i
                        current_item = item
                        break
            elif force_jump_to_top:
                current = 0
                current_item = None

                current, current_item = determine_current(
                    current,
                    current_item,
                    to_display,
                )

            if current < 0:
                current = 0
            if current >= len(to_display):
                current = len(to_display) - 1

            if len(to_display) > 0:
                if current < len(to_display):
                    current_item = to_display[current]
            else:
                current_item = None

            offset = scroll_if_needed(
                current,
                force_jump_to_top,
                offset,
                height,
                bottompad,
                starty,
                len(to_display),
            )

            detailed_output_offset = 0

            scroll_dirty = False
            force_jump_to_top = False

        win.erase()
        title(win, HELP)

        if show_help:
            show_help_screen(win)
            status(win, '')
        elif icinga_items is None:
            status(win, 'NO CONNECTION TO ICINGA')
            red_body(win)
        else:
            status(
                win,
                standard_status(
                    win,
                    filters,
                    only_broken,
                    icinga.settings['use_group_filters'],
                    refresh_delta,
                    refresh_every,
                    current,
                    len(to_display),
                ),
            )

            if current_item is None:
                detailed_output_offset = 0
            else:
                wrap_output(current_item, width)
                if detailed_output_offset < 0:
                    detailed_output_offset = 0
                elif detailed_output_offset >= len(current_item.output_lines_wrapped) - 1:
                    detailed_output_offset = len(current_item.output_lines_wrapped) - 1

            border_pane = list_items(
                win,
                offset,
                current,
                to_display,
                selected,
                show_output_detail,
                config['size_of_item_area'],
                detailed_output_offset,
            )
            height -= border_pane

        win.refresh()
        win.timeout(1000)
        try:
            char = win.getkey()
        except:
            char = None
        win.timeout(-1)

        new_children = []
        for child_info in children:
            child_pid, path_selection, path_output = child_info
            if child_pid.poll() is None:
                new_children.append(child_info)
            else:
                try:
                    remove(path_selection)
                    remove(path_output)
                except FileNotFoundError:
                    pass
        children = new_children

        if selected:
            items_for_action = selected
        else:
            try:
                items_for_action = set([to_display[current]])
            except IndexError:
                items_for_action = set()

        if char in ['q']:
            if show_output_detail:
                show_output_detail = False
            else:
                return
        if char in ['Q']:
            return
        if char in ['h']:
            show_output_detail = False
        if char in ['\n', 'l']:
            show_output_detail = True

        if char in ['?']:
            show_help = not show_help
        if char in ['b']:
            only_broken = not only_broken
            filter_dirty = True
        if char in ['C']:
            icinga.settings['use_group_filters'] = not icinga.settings['use_group_filters']
            force_refresh = True
        if char in ['a', 'A']:
            response = query_duration_comment(
                win,
                items_for_action,
                config['external_tool'],
                icinga.settings['default_ack_duration'],
            )
            if response is not None:
                comment, _, end_time = response
                status(win, 'Setting acknowledgement ...')
                win.refresh()
                if char == 'a':
                    icinga.set_ack(items_for_action, comment, end_time)
                else:
                    icinga.set_ack_for_host(items_for_action, icinga_items, comment, end_time)
                force_refresh = True
        if char in ['d', 'D']:
            response = query_duration_comment(
                win,
                items_for_action,
                config['external_tool'],
                icinga.settings['default_downtime_duration'],
            )
            if response is not None:
                comment, start_time, end_time = response
                status(win, 'Setting downtime ...')
                win.refresh()
                if char == 'd':
                    icinga.set_downtime(items_for_action, comment, start_time, end_time)
                else:
                    icinga.set_downtime_for_host(items_for_action, comment, start_time, end_time)
                force_refresh = True
        if char in ['n']:
            status(win, 'Queueing checks ...')
            win.refresh()
            icinga.queue_check(items_for_action)
            force_refresh = True
        if char in ['e']:
            children.extend(run_external_tool(items_for_action, config['external_tool']))
        if char in ['r']:
            force_refresh = True
        if char in ['f']:
            filters = query_new_filter(win, filters)
            filter_dirty = True
        if char in ['F']:
            if filters:
                filters.pop()
                filter_dirty = True
        if char in ['v']:
            if filters:
                filters.pop(0)
                filter_dirty = True
        if char in ['H', 'S']:
            try:
                ci = to_display[current]
            except IndexError:
                pass
            else:
                filters.append(ci.host_name if char == 'H' else ci.service_name)
                filter_dirty = True

        # Selections.
        if char in [' ']:
            try:
                selected.remove(to_display[current])
            except KeyError:
                selected.add(to_display[current])
            current += 1
            scroll_dirty = True

        if char in [chr(1), '^A']:
            selected = set(to_display)
        if char in ['c']:
            selected = set()

        # Scrolling.
        if char in ['J']:
            detailed_output_offset += 1
        if char in ['K']:
            detailed_output_offset -= 1
        if char in ['j', 'KEY_DOWN']:
            current += 1
            scroll_dirty = True
        if char in ['k', 'KEY_UP']:
            current -= 1
            scroll_dirty = True

        if char in ['g', 'KEY_HOME']:
            current = 0
            scroll_dirty = True
        if char in ['G', 'KEY_END']:
            current = len(to_display) - 1
            scroll_dirty = True

        if char in [chr(6), '^F', 'KEY_NPAGE']:
            current += int(0.5 * (height - starty))
            scroll_dirty = True
        if char in [chr(2), '^B', 'KEY_PPAGE']:
            current -= int(0.5 * (height - starty))
            scroll_dirty = True

        if char is not None:
            last_key = datetime.now()
            refresh_delta = timedelta(seconds=0)
        else:
            refresh_delta = datetime.now() - last_key
            if refresh_delta > refresh_every:
                force_refresh = True
                force_jump_to_top = True
                last_key = datetime.now()


def get_auth_from_config(config):
    if 'password' in config['api_auth']:
        password = config['api_auth']['password']
    elif 'pass_command' in config['api_auth']:
        password = check_output(
            config['api_auth']['pass_command'],
            shell=True,
        ).decode('UTF-8').splitlines()[0].strip()
    else:
        raise Exception('Your config needs either "password" or "pass_command"')

    return config['api_auth']['username'], password


if __name__ == '__main__':
    with open(expanduser('~/.terminga'), 'r') as fp:
        config = loads(fp.read())

    icinga = Icinga()
    icinga.settings = {
        'auth': get_auth_from_config(config),
        'base_url': config['icinga_url'],
        'default_ack_duration': config.get('default_ack_duration', 'none'),
        'default_downtime_duration': config.get('default_downtime_duration', '1d'),
        'use_group_filters': True,
        'group_filters': config.get('group_filters', {}),
        'ssl_verify': config.get('ssl_verify', True),
    }

    config.setdefault('external_tool', None)
    config.setdefault('hide_ack_from_broken', False)
    config.setdefault('jump_to_first_unhandled', False)
    config.setdefault('show_detailed_output_on_startup', True)
    config.setdefault('size_of_item_area', 10)

    try:
        curses.wrapper(
            interact,
            icinga,
            config,
        )
        exit(0)
    except Exception:
        print('It appears we had a whoopsie. Please report this.')
        print()
        print_exc()
        print()
        input('Press a key to reset and continue.')
        execv(argv[0], argv)
